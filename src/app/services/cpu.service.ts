import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CPUService {
  private registers: any = {
    a: 0x00,
    b: 0x00,
    c: 0x00,
    d: 0x00,
    e: 0x00,
    f: 0x00,
    h: 0x00,
    l: 0x00,
    sp: 0x00,
    pc: 0x00,
  }

  instructions: any = {
    0x00: { op: async () => { return }, bytes: 1, cycles: 1 },
    0x01: { op: async (data: number[]) => { this.writeRegister('b', data[0]); this.writeRegister('c', data[1]) }, bytes: 3, cycles: 3 },
    0x02: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x03: { op: async () => { const concatNumber = this.concatRegisters('b', 'c'); this.addMultiRegisters('b', 'c', concatNumber + 1) }, bytes: 1, cycles: 2 },
    0x04: { op: async () => { const value = this.readRegister('b'); this.writeRegister('b', value + 1) }, bytes: 1, cycles: 1 },
    0x05: { op: async () => { const value = this.readRegister('b'); this.writeRegister('b', value - 1) }, bytes: 1, cycles: 1 },
    0x06: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x07: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x08: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x09: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x0F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x10: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x11: { op: async (data: number[]) => { this.writeRegister('d', data[0]); this.writeRegister('e', data[1]) }, bytes: 3, cycles: 3 },
    0x12: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x13: { op: async () => { const concatNumber = this.concatRegisters('d', 'e'); this.addMultiRegisters('d', 'e', concatNumber + 1) }, bytes: 1, cycles: 2 },
    0x14: { op: async () => { const value = this.readRegister('d'); this.writeRegister('d', value + 1) }, bytes: 1, cycles: 1 },
    0x15: { op: async () => { const value = this.readRegister('d'); this.writeRegister('d', value - 1) }, bytes: 1, cycles: 1 },
    0x16: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x17: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x18: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x19: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x1F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x20: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x21: { op: async (data: number[]) => { this.writeRegister('h', data[0]); this.writeRegister('l', data[1]) }, bytes: 3, cycles: 3 },
    0x22: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x23: { op: async () => { const concatNumber = this.concatRegisters('h', 'l'); this.addMultiRegisters('h', 'l', concatNumber + 1) }, bytes: 1, cycles: 2 },
    0x24: { op: async () => { const value = this.readRegister('h'); this.writeRegister('h', value + 1) }, bytes: 1, cycles: 1 },
    0x25: { op: async () => { const value = this.readRegister('h'); this.writeRegister('h', value - 1) }, bytes: 1, cycles: 1 },
    0x26: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x27: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x28: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x29: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x2F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x30: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x31: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x32: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x33: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x34: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x35: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x36: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x37: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x38: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x39: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x3F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x40: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x41: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x42: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x43: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x44: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x45: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x46: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x47: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x48: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x49: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x4F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x50: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x51: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x52: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x53: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x54: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x55: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x56: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x57: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x58: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x59: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x5F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x60: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x61: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x62: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x63: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x64: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x65: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x66: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x67: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x68: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x69: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x6F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x70: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x71: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x72: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x73: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x74: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x75: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x76: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x77: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x78: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x79: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x7F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x80: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x81: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x82: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x83: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x84: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x85: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x86: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x87: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x88: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x89: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x8F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x90: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x91: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x92: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x93: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x94: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x95: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x96: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x97: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x98: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x99: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9A: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9B: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9C: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9D: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9E: { op: async () => { return }, bytes: 0, cycles: 0 },
    0x9F: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xA9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAD: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xAF: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xB9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBD: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xBF: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xC9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCD: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xCF: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xD9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDD: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xDF: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xE9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xEA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xEB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xEC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xED: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xEE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xEF: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF0: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF1: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF2: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF3: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF4: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF5: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF6: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF7: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF8: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xF9: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFA: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFB: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFC: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFD: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFE: { op: async () => { return }, bytes: 0, cycles: 0 },
    0xFF: { op: async () => { return }, bytes: 0, cycles: 0 },
  }
  constructor() { }

  writeRegister(register: string, value: number) {
    this.registers[register] = value;
  }

  readRegister(register: string): number {
    return this.registers[register];
  }

  concatRegisters(firstResgiter: string, secondRegister: string): number {
    if (secondRegister.length < 2) {
      console.log(parseInt(this.registers[firstResgiter].toString(16) + '0' + this.registers[secondRegister].toString(16), 16))
      return parseInt(this.registers[firstResgiter].toString(16) + '0' + this.registers[secondRegister].toString(16), 16);
    }
    console.log(parseInt(this.registers[firstResgiter].toString(16) + this.registers[secondRegister].toString(16), 16))
    return parseInt(this.registers[firstResgiter].toString(16) + this.registers[secondRegister].toString(16), 16);
  }

  addMultiRegisters(firstResgiter: string, secondResgiter: string, value: number) {
    let stringValue = value.toString(16);
    if (stringValue.length < 2) {
      stringValue = "000" + stringValue;
    } else if (stringValue.length < 3) {
      stringValue = "00" + stringValue;
    } else if (stringValue.length < 4) {
      stringValue = "0" + stringValue;
    }
    console.log(stringValue);
    this.writeRegister(firstResgiter, parseInt(stringValue.slice(0, 2), 16));
    this.writeRegister(secondResgiter, parseInt(stringValue.slice(2, 4), 16));
  }

  async performInstruction(instruction: number, data: number[]) {
    await this.instructions[instruction].op(data);
    console.log(this.registers)
  }
}
